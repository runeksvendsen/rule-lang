<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
	<!ENTITY digitPart "[0-9](?:_?[0-9])*">
	<!ENTITY beforeDigit "(?&lt;![\.\w[:^ascii:]])">
	<!ENTITY beforePointFloat "(?&lt;![\w[:^ascii:]])">
]>
<!-- Python syntax highlightning v0.9 by Per Wigren -->
<!-- Python syntax highlighting v1.9 by Michael Bueker (improved keyword differentiation) -->
<!-- Python syntax highlighting v1.97 by Paul Giannaros -->
<!-- Python syntax highlighting v1.99 by Primoz Anzur -->
<!-- Python syntax highlighting v2.01 by Paul Giannaros:
	* full format character support
	* unicode string modifier supported -->
<!-- v2.02 remove RegExpr for nums and make indent consistent -->
<!-- v2.03 highlight decorators, remove operator regex, don't highlight parens as operators -->
<!-- v2.04 make alerts visible even if they are directly after ''' or # without a space -->
<!-- v2.06 decorator names can (and often do) contain periods -->
<!-- v2.07 add support for %prog and co, see bug 142832 -->
<!-- v2.08 add missing overloaders, new Python 3 statements, builtins, and keywords -->
<!-- v2.29 recognize escape sequenzes correctly -->
<language name="rulelang" version="1" style="python" indenter="python" kateversion="5.0" section="Scripts" extensions="*.py;*.pyw;SConstruct;SConscript;*.FCMacro" mimetype="application/x-python;text/x-python;text/x-python3" casesensitive="1" author="" license="">
	<highlighting>
		<!-- <list name="defs">
			<item>let</item>
		</list> -->
		<list name="operators">
			<item>AND</item>
			<item>NOT</item>
			<item>OR</item>
		</list>
		<list name="flow">
			<item>for all</item>
			<item>let</item>
			<item>if</item>
			<item>require</item>

			<item>count</item>
			<item>sum</item>
			<item>average</item>
			<item>minimum</item>
			<item>maximum</item>

			<item>where</item>
			<item>grouped</item>
			<item>by</item>
		</list>
		<list name="specialvars">
			<item>true</item>
			<item>false</item>
		</list>

		<contexts>
			<context name="Normal" attribute="Normal Text" lineEndContext="#stay">
				<keyword attribute="Import" String="import" context="#stay"/>
				<keyword attribute="Definition Keyword" String="defs" context="#stay"/>
				<keyword attribute="Operator Keyword" String="operators" context="#stay"/>
				<keyword attribute="Flow Control Keyword" String="flow" context="#stay"/>
				<keyword attribute="Builtin Function" String="builtinfuncs" context="#stay"/>
				<keyword attribute="Special Variable" String="specialvars" context="#stay"/>
				<keyword attribute="Extensions" String="bindings" context="#stay"/>
				<keyword attribute="Exceptions" String="exceptions" context="#stay"/>
				<keyword attribute="Overloaders" String="overloaders" context="#stay"/>
				<RegExpr attribute="Normal Text" String="[a-zA-Z_][a-zA-Z_0-9]{2,}" context="#stay"/>

				<!-- Complex: 1j ; 1.1j ; 1.j ; .1j ; 1e3j ; 1.1e3j ; 1.e3j ; .1e3j -->
				<RegExpr attribute="Complex" String="(?:&beforeDigit;&digitPart;(?:\.(?:&digitPart;)?)?|&beforePointFloat;\.&digitPart;)(?:[eE][\+\-]?&digitPart;)?[jJ]\b" context="#stay"/>
				<!-- Hexadecimal: 0xA1, Binary: 0b01, Octal: 0o71 -->
				<RegExpr attribute="Hex" String="&beforeDigit;0[xX](?:_?[\da-fA-F])+\b" context="#stay"/>
				<RegExpr attribute="Binary" String="&beforeDigit;0[bB](?:_?[01])+\b" context="#stay"/>
				<RegExpr attribute="Octal" String="&beforeDigit;0[oO](?:_?[0-7])+\b" context="#stay"/>
				<!-- Float: 1.1 ; 1. ; .1 ; 1e3 ; 1.1e3 ; 1.e3 ; .1e3 -->
				<RegExpr attribute="Float" String="(?:&beforeDigit;&digitPart;(?:\.(?:&digitPart;)?)?|&beforePointFloat;\.&digitPart;)[eE][\+\-]?&digitPart;\b" context="#stay"/>
				<RegExpr attribute="Float" String="(?:&beforeDigit;&digitPart;\.(?:&digitPart;\b)?|&beforePointFloat;\.&digitPart;\b)" context="#stay"/>
				<!-- Decimal: 123 ; 000 -->
				<RegExpr attribute="Int" String="&beforeDigit;(?:[1-9](?:_?\d)*|0(?:_?0)*)[lL]?\b" context="#stay"/>

				<DetectChar attribute="Normal Text" char="{" context="Dictionary" beginRegion="Dictionary"/>
				<DetectChar attribute="Normal Text" char="[" context="List" beginRegion="List"/>
				<DetectChar attribute="Normal Text" char="(" context="Tuple" beginRegion="Tuple"/>

				<IncludeRules context="CommentVariants" />

				<DetectChar attribute="Comment" char="#" context="Hash comment"/>

				<IncludeRules context="StringVariants" />

				<RegExpr attribute="Decorator" String="@[_a-zA-Z[:^ascii:]][\._a-zA-Z0-9[:^ascii:]]*" firstNonSpace="true"/>
				<AnyChar attribute="Operator" String="+*/%\|=;\!&lt;&gt;!^&amp;~-@" context="#stay"/>
			</context>

			<context name="#CheckForString" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="CheckForStringNext"/>
			</context>

			<context name="CheckForStringNext" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="CheckForStringNext"/>
				<IncludeRules context="StringVariants"/>
			</context>

			<context name="StringVariants" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces/>

				<RegExpr attribute="String" String="u?'''"                insensitive="true" context="Triple A-string" beginRegion="Triple A-region"/>
				<RegExpr attribute="String" String="u?&quot;&quot;&quot;" insensitive="true" context="Triple Q-string" beginRegion="Triple Q-region"/>
				<RegExpr attribute="String" String="u?'"                  insensitive="true" context="Single A-string"/>
				<RegExpr attribute="String" String="u?&quot;"             insensitive="true" context="Single Q-string"/>

				<RegExpr attribute="Raw String" String="(u?r|ru)'''"                insensitive="true" context="Raw Triple A-string" beginRegion="Triple A-region"/>
				<RegExpr attribute="Raw String" String="(u?r|ru)&quot;&quot;&quot;" insensitive="true" context="Raw Triple Q-string" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Raw String" String="(u?r|ru)'"                  insensitive="true" context="Raw A-string"/>
				<RegExpr attribute="Raw String" String="(u?r|ru)&quot;"             insensitive="true" context="Raw Q-string"/>

				<StringDetect attribute="F-String" String="f'''"                insensitive="true" context="Triple A-F-String" beginRegion="Triple A-region"/>
				<StringDetect attribute="F-String" String="f&quot;&quot;&quot;" insensitive="true" context="Triple Q-F-String" beginRegion="Triple Q-region"/>
				<StringDetect attribute="F-String" String="f'"                  insensitive="true" context="Single A-F-String"/>
				<StringDetect attribute="F-String" String="f&quot;"             insensitive="true" context="Single Q-F-String"/>

				<RegExpr attribute="Raw F-String" String="(fr|rf)'''"                insensitive="true" context="Raw Triple A-F-String" beginRegion="Triple A-region"/>
				<RegExpr attribute="Raw F-String" String="(fr|rf)&quot;&quot;&quot;" insensitive="true" context="Raw Triple Q-F-String" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Raw F-String" String="(fr|rf)'"                  insensitive="true" context="Raw A-F-String"/>
				<RegExpr attribute="Raw F-String" String="(fr|rf)&quot;"             insensitive="true" context="Raw Q-F-String"/>
			</context>

			<context name="CommentVariants" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces/>

				<RegExpr attribute="Comment" String="u?'''"                insensitive="true" firstNonSpace="true" context="Triple A-comment" beginRegion="Triple A-region"/>
				<RegExpr attribute="Comment" String="u?&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Triple Q-comment" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Comment" String="u?'"                  insensitive="true" firstNonSpace="true" context="Single A-comment"/>
				<RegExpr attribute="Comment" String="u?&quot;"             insensitive="true" firstNonSpace="true" context="Single Q-comment"/>

				<RegExpr attribute="Comment" String="(u?r|ru)'''"                insensitive="true" firstNonSpace="true" context="Triple A-comment" beginRegion="Triple A-region"/>
				<RegExpr attribute="Comment" String="(u?r|ru)&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Triple Q-comment" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Comment" String="(u?r|ru)'"                  insensitive="true" firstNonSpace="true" context="Single A-comment"/>
				<RegExpr attribute="Comment" String="(u?r|ru)&quot;"             insensitive="true" firstNonSpace="true" context="Single Q-comment"/>
			</context>

			<context name="Dictionary" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="}" context="#pop" endRegion="Dictionary"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="List" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="]" context="#pop" endRegion="List"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="Tuple" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char=")" context="#pop" endRegion="Tuple"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<!-- Comments -->

			<context name="Hash comment" attribute="Comment" lineEndContext="#pop">
				<IncludeRules context="##Alerts" />
				<IncludeRules context="##Modelines" />
			</context>

			<context name="Triple A-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<StringDetect attribute="Comment" String="'''" context="#pop" endRegion="Triple A-region"/>
				<IncludeRules context="##Alerts" />
			</context>

			<context name="Triple Q-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<StringDetect attribute="Comment" String="&quot;&quot;&quot;" context="#pop" endRegion="Triple Q-region"/>
				<IncludeRules context="##Alerts" />
			</context>

			<context name="Single A-comment" attribute="Comment" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<DetectChar attribute="Comment" char="'" context="#pop"/>
				<IncludeRules context="##Alerts" />
			</context>

			<context name="Single Q-comment" attribute="Comment" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<DetectChar attribute="Comment" char="&quot;" context="#pop"/>
				<IncludeRules context="##Alerts" />
			</context>

			<!-- Strings -->

			<!-- format characters -->
			<context name="stringformat" attribute="String Substitution" lineEndContext="#stay">
				<!-- Python 2 style. Syntax:
				     1. start character '%'
				     2. [optional] Mapping key, e.g. '(foo)'
				     3. [optional] Conversion flags, one of '#0- +'
				     4. [optional] Minimum width, integer or '*'
				     5. [optional] Precision, '.' followed by integer or '*'
				     6. [optional] Length modifier, one of 'hlL'
				     7. conversion type, one of 'crsdiouxXeEfFgG%'
				     [Special cases: %prog and %default - see http://docs.python.org/library/optparse.html]
				-->
				<RegExpr attribute="String Substitution" String="%((\([a-zA-Z0-9_]+\))?[#0\- +]?([1-9][0-9]*|\*)?(\.([1-9][0-9]*|\*))?[hlL]?[crsdiouxXeEfFgG%]|prog|default)" context="#stay"/>
				<!-- http://docs.python.org/2/library/string.html#format-string-syntax:
				     replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"
				     field_name        ::=  arg_name ("." attribute_name | "[" element_index "]")*
				     arg_name          ::=  [identifier | integer]
				     attribute_name    ::=  identifier
				     element_index     ::=  integer | index_string
				     index_string      ::=  <any source character except "]"> +
				     conversion        ::=  "r" | "s"
				     format_spec       ::=  [[fill]align][sign][#][0][width][,][.precision][type]
				     fill              ::=  <any character>
				     align             ::=  "<" | ">" | "=" | "^"
				     sign              ::=  "+" | "-" | " "
				     width             ::=  integer
				     precision         ::=  integer
				     type              ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
				-->
				<RegExpr attribute="String Substitution" String="\{(([a-zA-Z0-9_]+|[0-9]+)(\.[a-zA-Z0-9_]+|\[[^ \]]+\])*)?(![rs])?(:([^}]?[&lt;&gt;=^])?[ +-]?#?0?[0-9]*(\.[0-9]+)?[bcdeEfFgGnosxX%]?)?\}" context="#stay"/>
				<Detect2Chars attribute="String Substitution" char="{" char1="{" context="#stay" />
				<Detect2Chars attribute="String Substitution" char="}" char1="}" context="#stay" />
			</context>

			<!-- escape characters -->
			<context name="stringescape" attribute="String Char" lineEndContext="#stay">
				<!-- As this highlighting style is for both, Python 2 and 3,
				we do not know if a normal string is “unicode” or not. So we
				-->
				<RegExpr attribute="String Char" String="\\[\\'&quot;abfnrtv]" context="#stay"/>
				<RegExpr attribute="String Char" String="\\[0-7]{1,3}" context="#stay"/>
				<RegExpr attribute="String Char" String="\\x[0-9A-Fa-f]{2}" context="#stay"/>
				<RegExpr attribute="String Char" String="\\u[0-9A-Fa-f]{4}" context="#stay"/>
				<RegExpr attribute="String Char" String="\\U[0-9A-Fa-f]{8}" context="#stay"/>
				<RegExpr attribute="String Char" String="\\N\{[a-zA-Z0-9\- ]+\}" context="#stay"/>
			</context>

			<!-- f-literals -->
			<context name="stringinterpolation" attribute="F-String" lineEndContext="#stay">
				<Detect2Chars attribute="String Char" char="{" char1="{" context="#stay"/>
				<DetectChar attribute="String Substitution" char="{" context="String Interpolation"/>
			</context>
			<context name="String Interpolation" attribute="String Substitution" lineEndContext="#stay">
				<DetectChar attribute="Error" char="\" context="#pop"/>
				<RegExpr attribute="String Substitution" String="(![rs])?(:([^}]?[&lt;&gt;=^])?[ +-]?#?0?[0-9]*(\.[0-9]+)?[bcdeEfFgGnosxX%]?)?\}" context="#pop"/>
				<IncludeRules context="Normal"/> <!-- TODO: create expression context instead -->
			</context>


			<!--
			It follows a Binary tree of string kinds (not even touching byte literals).
			The levels are:
			1. triple- vs. single-quoted
			2. apostrophe vs. quotation mark
			3. static vs. interpolated (f-literal)
			4. escaped vs. raw
			Adding byte literals wouldn’t make the current 2⁴ into 2⁵ contexts, as there are no byte f-literals
			-->


			<!-- Triple-quoted A-strings -->
			<context name="Triple A-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="'''" context="#pop#CheckForString" endRegion="Triple A-region"/>
			</context>

			<context name="Raw Triple A-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="Raw String" String="'''" context="#pop#CheckForString" endRegion="Triple A-region"/>
			</context>

			<context name="Triple A-F-String" attribute="F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="F-String" String="'''" context="#pop#CheckForString" endRegion="Triple A-region"/>
			</context>

			<context name="Raw Triple A-F-String" attribute="Raw F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw F-String" context="#stay"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="Raw F-String" String="'''" context="#pop#CheckForString" endRegion="Triple A-region"/>
			</context>

			<!-- Triple-quoted Q-strings -->
			<context name="Triple Q-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Triple Q-region"/>
			</context>

			<context name="Raw Triple Q-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="Raw String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Triple Q-region"/>
			</context>

			<context name="Triple Q-F-String" attribute="F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="F-String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Triple Q-region"/>
			</context>

			<context name="Raw Triple Q-F-String" attribute="Raw F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw F-String" context="#stay"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="Raw F-String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Triple Q-region"/>
			</context>


			<!-- Single-quoted A-strings -->
			<context name="Single A-string" attribute="String" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="'" context="#pop#CheckForString"/>
			</context>

			<context name="Raw A-string" attribute="Raw String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="'" context="#pop#CheckForString"/>
			</context>

			<context name="Single A-F-String" attribute="F-String" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="F-String" char="'" context="#pop#CheckForString"/>
			</context>

			<context name="Raw A-F-String" attribute="Raw F-String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw F-String" context="#stay"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="Raw F-String" char="'" context="#pop#CheckForString"/>
			</context>

			<!-- Single-quoted Q-strings -->
			<context name="Single Q-string" attribute="String" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="&quot;" context="#pop#CheckForString"/>
			</context>

			<context name="Raw Q-string" attribute="Raw String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="&quot;" context="#pop#CheckForString"/>
			</context>

			<context name="Single Q-F-String" attribute="F-String" lineEndContext="#stay">
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="F-String" char="&quot;" context="#pop#CheckForString"/>
			</context>

			<context name="Raw Q-F-String" attribute="Raw F-String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw F-String" context="#stay"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="Raw F-String" char="&quot;" context="#pop#CheckForString"/>
			</context>
		</contexts>

		<itemDatas>
			<itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
			<itemData name="Definition Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Operator" defStyleNum="dsOperator" spellChecking="false"/>
			<itemData name="Operator Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Flow Control Keyword" defStyleNum="dsControlFlow" spellChecking="false"/>
			<itemData name="Builtin Function" defStyleNum="dsBuiltIn" spellChecking="false"/>
			<itemData name="Special Variable" defStyleNum="dsVariable" spellChecking="false"/>
			<itemData name="Extensions" defStyleNum="dsExtension" spellChecking="false"/>
			<itemData name="Exceptions" defStyleNum="dsPreprocessor" spellChecking="false"/>
			<itemData name="Overloaders" defStyleNum="dsFunction" spellChecking="false"/>
			<itemData name="Import" defStyleNum="dsImport" spellChecking="false"/>
			<itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
			<itemData name="Int" defStyleNum="dsDecVal" spellChecking="false"/>
			<itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Binary" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Complex" defStyleNum="dsOthers" spellChecking="false"/>
			<itemData name="Comment" defStyleNum="dsComment"/>
			<itemData name="String" defStyleNum="dsString"/>
			<itemData name="Raw String" defStyleNum="dsVerbatimString"/>
			<itemData name="F-String" defStyleNum="dsSpecialString"/>
			<itemData name="Raw F-String" defStyleNum="dsVerbatimString"/>
			<itemData name="String Char" defStyleNum="dsChar" spellChecking="false"/>
			<itemData name="String Substitution" defStyleNum="dsSpecialChar" spellChecking="false"/>
			<itemData name="Decorator" defStyleNum="dsAttribute" spellChecking="false"/>
			<itemData name="Error" defStyleNum="dsError"/>
		</itemDatas>
	</highlighting>
	<general>
		<folding indentationsensitive="1" />
		<emptyLines>
			<emptyLine regexpr="(?:\s+|\s*#.*)"/>
		</emptyLines>
		<comments>
			<comment name="singleLine" start="#" position="afterwhitespace"/>
		</comments>
		<keywords casesensitive="1" additionalDeliminator="#'"/>
	</general>
</language>

<!-- kate: space-indent off; indent-width 4; -->